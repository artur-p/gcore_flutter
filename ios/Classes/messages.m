// Autogenerated from Pigeon (v22.6.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface BMLMessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation BMLMessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface BMLMessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation BMLMessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  {
    [super writeValue:value];
  }
}
@end

@interface BMLMessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation BMLMessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[BMLMessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[BMLMessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *BMLGetMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    BMLMessagesPigeonCodecReaderWriter *readerWriter = [[BMLMessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpBMLGCoreHost(id<FlutterBinaryMessenger> binaryMessenger, NSObject<BMLGCoreHost> *api) {
  SetUpBMLGCoreHostWithSuffix(binaryMessenger, api, @"");
}

void SetUpBMLGCoreHostWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<BMLGCoreHost> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.gcore_flutter.GCoreHost.getPlatformVersion", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:BMLGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPlatformVersionWithError:)], @"BMLGCoreHost api (%@) doesn't respond to @selector(getPlatformVersionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getPlatformVersionWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
